PS C:\Users\HP\OneDrive\Documents\python demo\shell> cmd
Microsoft Windows [Version 10.0.19045.4170]
(c) Microsoft Corporation. All rights reserved.

C:\Users\HP\OneDrive\Documents\python demo\shell>python -m venv env

C:\Users\HP\OneDrive\Documents\python demo\shell>env\scripts\activate

(env) C:\Users\HP\OneDrive\Documents\python demo\shell>pip install django
Collecting django
  Using cached Django-5.0.3-py3-none-any.whl.metadata (4.2 kB)
Collecting asgiref<4,>=3.7.0 (from django)
  Downloading asgiref-3.8.1-py3-none-any.whl.metadata (9.3 kB)
Collecting sqlparse>=0.3.1 (from django)
  Using cached sqlparse-0.4.4-py3-none-any.whl.metadata (4.0 kB)
Collecting tzdata (from django)
  Using cached tzdata-2024.1-py2.py3-none-any.whl.metadata (1.4 kB)
Using cached Django-5.0.3-py3-none-any.whl (8.2 MB)
Downloading asgiref-3.8.1-py3-none-any.whl (23 kB)
Using cached sqlparse-0.4.4-py3-none-any.whl (41 kB)
Using cached tzdata-2024.1-py2.py3-none-any.whl (345 kB)
Installing collected packages: tzdata, sqlparse, asgiref, django
Successfully installed asgiref-3.8.1 django-5.0.3 sqlparse-0.4.4 tzdata-2024.1

(env) C:\Users\HP\OneDrive\Documents\python demo\shell>django-admin startproject library

(env) C:\Users\HP\OneDrive\Documents\python demo\shell>django-admin startapp book

(env) C:\Users\HP\OneDrive\Documents\python demo\shell>cd library

(env) C:\Users\HP\OneDrive\Documents\python demo\shell\library>django-admin startapp book

(env) C:\Users\HP\OneDrive\Documents\python demo\shell\library>python manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).

You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations fontenttypes, sessions.
Run 'python manage.py migrate' to apply them.
March 27, 2024 - 12:38:16
Django version 5.0.3, using settings 'library.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.


(env) C:\Users\HP\OneDrive\Documents\python demo\shell\library>python manage.py makemigrations
Migrations for 'book':
  book\migrations\0001_initial.py
    - Create model Author
    - Create model Book

(env) C:\Users\HP\OneDrive\Documents\python demo\shell\library>python manage.py migrate       
Operations to perform:
  Apply all migrations: admin, auth, book, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying book.0001_initial... OK
  Applying sessions.0001_initial... OK

(env) C:\Users\HP\OneDrive\Documents\python demo\shell\library>python manage.py createsuperuser
Username (leave blank to use 'hp'): admin
Email address: 
Password: 
Password (again):
Superuser created successfully.

(env) C:\Users\HP\OneDrive\Documents\python demo\shell\library>python manage.py runserver      
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
March 27, 2024 - 12:40:35
Django version 5.0.3, using settings 'library.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

[27/Mar/2024 12:40:38] "GET / HTTP/1.1" 200 10629
Not Found: /login/
[27/Mar/2024 12:40:41] "GET /login/ HTTP/1.1" 404 2096
[27/Mar/2024 12:40:42] "GET /admin/ HTTP/1.1" 302 0
[27/Mar/2024 12:40:42] "GET /admin/login/?next=/admin/ HTTP/1.1" 200 4158
[27/Mar/2024 12:40:42] "GET /static/admin/css/dark_mode.css HTTP/1.1" 200 2682
[27/Mar/2024 12:40:42] "GET /static/admin/css/nav_sidebar.css HTTP/1.1" 200 2810
[27/Mar/2024 12:40:42] "GET /static/admin/css/base.css HTTP/1.1" 200 21544
[27/Mar/2024 12:40:42] "GET /static/admin/css/login.css HTTP/1.1" 200 958
[27/Mar/2024 12:40:42] "GET /static/admin/css/responsive.css HTTP/1.1" 200 17905
[27/Mar/2024 12:40:42] "GET /static/admin/js/nav_sidebar.js HTTP/1.1" 200 3063
[27/Mar/2024 12:40:42] "GET /static/admin/js/theme.js HTTP/1.1" 200 1943
[27/Mar/2024 12:40:43] "GET /admin/ HTTP/1.1" 302 0
[27/Mar/2024 12:40:43] "GET /admin/login/?next=/admin/ HTTP/1.1" 200 4158
[27/Mar/2024 12:40:46] "POST /admin/login/?next=/admin/ HTTP/1.1" 302 0
[27/Mar/2024 12:40:46] "GET /admin/ HTTP/1.1" 200 6571
[27/Mar/2024 12:40:46] "GET /static/admin/css/dashboard.css HTTP/1.1" 200 441
[27/Mar/2024 12:40:47] "GET /static/admin/img/icon-changelink.svg HTTP/1.1" 200 380
[27/Mar/2024 12:40:47] "GET /static/admin/img/icon-addlink.svg HTTP/1.1" 200 331
[27/Mar/2024 12:40:48] "GET /admin/book/author/ HTTP/1.1" 200 7680
[27/Mar/2024 12:40:48] "GET /static/admin/css/changelists.css HTTP/1.1" 200 6811
[27/Mar/2024 12:40:48] "GET /static/admin/js/jquery.init.js HTTP/1.1" 200 347
[27/Mar/2024 12:40:48] "GET /admin/jsi18n/ HTTP/1.1" 200 3342
[27/Mar/2024 12:40:48] "GET /static/admin/js/core.js HTTP/1.1" 200 6208
[27/Mar/2024 12:40:48] "GET /static/admin/js/urlify.js HTTP/1.1" 200 7887
[27/Mar/2024 12:40:48] "GET /static/admin/js/actions.js HTTP/1.1" 200 8067
[27/Mar/2024 12:40:48] "GET /static/admin/js/admin/RelatedObjectLookups.js HTTP/1.1" 200 9042
[27/Mar/2024 12:40:48] "GET /static/admin/js/prepopulate.js HTTP/1.1" 200 1531
[27/Mar/2024 12:40:48] "GET /static/admin/js/vendor/jquery/jquery.js HTTP/1.1" 200 285314
[27/Mar/2024 12:40:49] "GET /static/admin/js/filters.js HTTP/1.1" 200 978
[27/Mar/2024 12:40:49] "GET /static/admin/js/vendor/xregexp/xregexp.js HTTP/1.1" 200 325171
[27/Mar/2024 12:40:49] "GET /static/admin/img/tooltag-add.svg HTTP/1.1" 200 331
[27/Mar/2024 12:40:51] "GET /admin/ HTTP/1.1" 200 6571
[27/Mar/2024 12:40:52] "GET /admin/login/?next=/admin/ HTTP/1.1" 302 0
[27/Mar/2024 12:40:52] "GET /admin/ HTTP/1.1" 200 6571

(env) C:\Users\HP\OneDrive\Documents\python demo\shell\library>pip install django-extensions
Collecting django-extensions
  Downloading django_extensions-3.2.3-py3-none-any.whl.metadata (6.3 kB)
Requirement already satisfied: Django>=3.2 in c:\users\hp\onedrive\documents\python demo\shell\env\lib\s-extensions) (5.0.3)
Requirement already satisfied: asgiref<4,>=3.7.0 in c:\users\hp\onedrive\documents\python demo\shell\env
Django>=3.2->django-extensions) (3.8.1)
Requirement already satisfied: sqlparse>=0.3.1 in c:\users\hp\onedrive\documents\python demo\shell\env\lango>=3.2->django-extensions) (0.4.4)
Requirement already satisfied: tzdata in c:\users\hp\onedrive\documents\python demo\shell\env\lib\site-p->django-extensions) (2024.1)
Downloading django_extensions-3.2.3-py3-none-any.whl (229 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 229.9/229.9 kB 2.0 MB/s eta 0:00:00
Installing collected packages: django-extensions
Successfully installed django-extensions-3.2.3

(env) C:\Users\HP\OneDrive\Documents\python demo\shell\library>python manage.py shell_plus  
# Shell Plus Model Imports
from book.models import Author, Book
from django.contrib.admin.models import LogEntry
from django.contrib.auth.models import Group, Permission, User
from django.contrib.contenttypes.models import ContentType
from django.contrib.sessions.models import Session
# Shell Plus Django Imports
from django.core.cache import cache
from django.conf import settings
from django.contrib.auth import get_user_model
from django.db import transaction
from django.db.models import Avg, Case, Count, F, Max, Min, Prefetch, Q, Sum, When
from django.utils import timezone
from django.urls import reverse
from django.db.models import Exists, OuterRef, Subquery
Python 3.12.2 (tags/v3.12.2:6abddd9, Feb  6 2024, 21:26:36) [MSC v.1937 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from book.models import Author, Book
>>>
>>> # Create authors
>>> Author.objects.bulk_create([
...     Author(first_name='Author1', last_name='Lastname1', email='author1@example.com'),
...     Author(first_name='Author2', last_name='Lastname2', email='author2@example.com'),
...     Author(first_name='Author3', last_name='Lastname3', email='author3@example.com'),
...     Author(first_name='Author4', last_name='Lastname4', email='author4@example.com'),
...     Author(first_name='Author5', last_name='Lastname5', email='author5@example.com'),
... ])
[<Author: Author1 Lastname1>, <Author: Author2 Lastname2>, <Author: Author3 Lastname3>, <Author: Author4hor5 Lastname5>]
>>>
>>> # Create books
>>> Book.objects.bulk_create([
...     Book(name='Book1', price=100, author_id=1),
...     Book(name='Book2', price=200, author_id=2),
...     Book(name='Book3', price=300, author_id=3),
...     Book(name='Book4', price=400, author_id=4),
...     Book(name='Book5', price=500, author_id=5),
...     Book(name='Book6', price=600, author_id=1),
...     Book(name='Book7', price=700, author_id=2),
...     Book(name='Book8', price=800, author_id=3),
...     Book(name='Book9', price=900, author_id=4),
...     Book(name='Book10', price=1000, author_id=5),
... ])
[<Book: Book1>, <Book: Book2>, <Book: Book3>, <Book: Book4>, <Book: Book5>, <Book: Book6>, <Book: Book7>, <Book: 
Book8>, <Book: Book9>, <Book: Book10>]
>>> Author.objects.all()
<QuerySet [<Author: Author1 Lastname1>, <Author: Author2 Lastname2>, <Author: Author3 Lastname3>, <Author: Author4 Lastname4>, <Author: Author5 Lastname5>]>
>>> Book.objects.all()
<QuerySet [<Book: harry potter part 1>, <Book: harry potter part 2>, <Book: harry potter part 3>, <Book: harry potter part 4>, <Book: harry potter part 5>, <Book: harry potter part 6>, <Book: harry potter part 7>, <Book: harry potter part 8>, <Book: harry potter part 9>, <Book: harry potter part 10>]>
>>> authors = Author.objects.all()
>>> print(authors)
<QuerySet [<Author: Author1 Lastname1>, <Author: Author2 Lastname2>, <Author: Author3 Lastname3>, <Author: Author4 Lastname4>, <Author: Author5 Lastname5>]>
>>> Author.objects.filter(first_name__in=['Author5', 'Author2', 'Author1'])      
<QuerySet [<Author: Author1 Lastname1>, <Author: Author2 Lastname2>, <Author: Author5 Lastname5>]>
>>> authors = Author.objects.filter(last_name='')                          
>>> print(authors)
<QuerySet []>
>>> authors = Author.objects.filter(books_count__gt=10)
>>> print(authors)
<QuerySet [<Author: Author3 Lastname3>, <Author: Author5 Lastname5>]>
>>> authors = Author.objects.filter(average_rating__lte=3)
>>> print(authors)
<QuerySet [<Author: Author4 Lastname4>]>
>>> books = Book.objects.filter(price__lte=500)
>>> print(books)
<QuerySet [<Book: harry potter part 1>, <Book: harry potter part 2>, <Book: harry potter part 3>, <Book: harry potter part 5>]>
>>> books = Book.objects.filter(price__gte=700)
>>> print(books)
<QuerySet [<Book: harry potter part 4>, <Book: harry potter part 6>, <Book: harry potter part 7>, <Book: harry potter part 8>, <Book: harry potter part 9>, <Book: harry potter part 10>]>
>>> books = Book.objects.filter(average_rating__gt=3)
>>> print(books)
<QuerySet [<Book: harry potter part 1>, <Book: harry potter part 2>, <Book: harry potter part 3>, <Book: harry potter part 5>, <Book: harry potter part 6>, <Book: harry potter part 7>, <Book: harry potter part 8>, <Book: harry potter part 9>]>
>>> books = Book.objects.filter(count__gt=100)
>>> print(books)
<QuerySet []>
>>> books = Book.objects.filter(price__gt=500)
>>> for book in books:
...     print(f"Book Name: {book.name}, Price: {book.price}, Author's First Name: {book.author.first_name}")
...
Book Name: harry potter part 4, Price: 44856.00, Author's First Name: Author4
Book Name: harry potter part 6, Price: 748.00, Author's First Name: Author1
Book Name: harry potter part 7, Price: 748.00, Author's First Name: Author2
Book Name: harry potter part 8, Price: 847.00, Author's First Name: Author3
Book Name: harry potter part 9, Price: 951.00, Author's First Name: Author4
Book Name: harry potter part 10, Price: 1000.00, Author's First Name: Author5
>>> first_book = Book.objects.first()
>>> print(first_book.name)
harry potter part 1
>>> last_book = Book.objects.last()
>>> print(f"{last_book.name} - {last_book.author.full_name}")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'full_name'
>>> last_book = Book.objects.last()
>>> print(f"{last_book.name} - {last_book.author.first_name}-{last_book.author.last_name}")
harry potter part 10 - Author5-Lastname5
>>> book = Book.objects.get(id=your_book_id)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'your_book_id' is not defined
>>> print(f"{book.name} - - {book.author.first_name}-{book.author.last_name}")
harry potter part 10 - - Author5-Lastname5
>>> book = Book.objects.get(id=1)
>>> print(f"{book.name} - - {book.author.first_name}-{book.author.last_name}")
harry potter part 1 - - Author1-Lastname1
>>> total_books = Book.objects.count()
>>> total_authors = Author.objects.count()
>>> print(f"Total Books: {total_books}, Total Authors: {total_authors}")
Total Books: 10, Total Authors: 5
>>> book = Book.objects.get(id=5)
>>> book.author = harry 5 
  File "<console>", line 1
    book.author = harry 5
                        ^
SyntaxError: invalid syntax
>>> book.save()
>>> 
>>> print(f"Updated author's full name: {book.author.full_name}")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'full_name'
>>> from .models import Book, Author
Traceback (most recent call last):
  File "<console>", line 1, in <module>
KeyError: "'__name__' not in globals"
>>>
>>> # Fetch the book
>>> book = Book.objects.get(id=5)
>>>
>>> # Fetch the author named "harry 5"
>>> harry_5_author = Author.objects.get(first_name='harry', last_name='5')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\HP\OneDrive\Documents\python demo\shell\env\Lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\OneDrive\Documents\python demo\shell\env\Lib\site-packages\django\db\models\query.py", line 649, in get
    raise self.model.DoesNotExist(
book.models.Author.DoesNotExist: Author matching query does not exist.
>>> 
>>> # Update the book's author field
>>> book.author = harry_5_author
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'harry_5_author' is not defined
>>>
>>> # Save the changes
>>> book.save()
>>> 
>>> # Print the updated author's full name
>>> print(f"Updated author's full name: {book.author.full_name}")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'full_name'
>>> from .models import Book, Author                             
Traceback (most recent call last):
  File "<console>", line 1, in <module>
KeyError: "'__name__' not in globals"
>>>
>>> # Fetch the book
>>> book = Book.objects.get(id=5)
>>>
>>> # Fetch the author named "harry 5"
>>> harry_5_author = Author.objects.get(first_name='harry', last_name='5')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\HP\OneDrive\Documents\python demo\shell\env\Lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\OneDrive\Documents\python demo\shell\env\Lib\site-packages\django\db\models\query.py", line 649, in get
    raise self.model.DoesNotExist(
book.models.Author.DoesNotExist: Author matching query does not exist.
>>>
>>> # Update the book's author field
>>> book.author = harry_5_author
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'harry_5_author' is not defined
>>>
>>> # Save the changes
>>> book.save()
>>> 
>>> # Print the updated author's full name
>>> print(f"Updated author's full name: {book.author.first_name}")
Updated author's full name: Author5
>>> author_id = 2  
>>> new_author = Author.objects.get(pk=author_id)
>>> book.author.first_name = Jack
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Jack' is not defined
>>> book = Book.objects.get(id=5)
>>> 
>>> # Fetch the author named "harry 5"
>>> harry_5_author = Author.objects.get(first_name='harry', last_name='5')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\HP\OneDrive\Documents\python demo\shell\env\Lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\OneDrive\Documents\python demo\shell\env\Lib\site-packages\django\db\models\query.py", line 649, in get
    raise self.model.DoesNotExist(
book.models.Author.DoesNotExist: Author matching query does not exist.
>>>
>>> # Update the book's author field
>>> book.author = harry_5_author
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'harry_5_author' is not defined
>>>
>>> # Save the changes
>>> book.save()
>>> 
>>> # Print the updated author's full name
>>> print(f"Updated author's full name: {book.author.first_name}")
Updated author's full name: Author5
>>>
>>> print("Book Author:", book.author.first_name, book.author.last_name)
Book Author: Author5 Lastname5
>>> [02:35 pm] Parvathy Krishna
  File "<console>", line 1
    [02:35 pm] Parvathy Krishna
     ^
SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers    
>>> book_id = 1
>>>
>>> book = Book.objects.get(pk=book_id)
>>> 
>>> author_id = 2
>>>
>>> new_author = Author.objects.get(pk=author_id)
>>>
>>> book.author = new_author
>>>
>>> book.save()
>>> 
>>> print("Book name after updating author:", book.name)
Book name after updating author: harry potter part 1
>>>
>>> 
>>> print("Book Author:", book.author.first_name, book.author.last_name)
Book Author: Author2 Lastname2
>>> [02:35 pm] Parvathy Krishna
  File "<console>", line 1
    [02:35 pm] Parvathy Krishna
     ^
SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers    
>>> book_id = 1  
>>>
>>> book = Book.objects.get(pk=book_id)
>>>
>>> author_id = 2
>>>
>>> new_author = Author.objects.get(pk=author_id)
>>>
>>> book.author = new_author
>>>
>>> book.save()
>>> 
>>> print("Book name after updating author:", book.name)
Book name after updating author: harry potter part 1
>>> total_authors = Author.objects.count()
>>> print(f"Total Authors: {total_authors}")
Total Authors: 5
>>> high_rated_authors_count = Author.objects.filter(average_rating__gte=3).count()
>>> print(f"Authors with average rating >= 3: {high_rated_authors_count}")
Authors with average rating >= 3: 4
>>> author_exists = Author.objects.filter(email=your_email).exists()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'your_email' is not defined
>>> print(f"Author exists: {author_exists}")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'author_exists' is not defined
>>> author_exists = Author.objects.filter(email=author5@example.com).exists()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'author5' is not defined. Did you mean: 'authors'?
>>> print(f"Author exists: {author_exists}")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'author_exists' is not defined
>>> email_to_check = "author5@example.com" 
>>> if Author.objects.filter(email=email_to_check).exists():
...     print("Author with email", email_to_check, "exists.")
... else:
...     print("Author with email", email_to_check, "does not exist.")
... 
Author with email author5@example.com exists.
>>> book_exists = Book.objects.filter(name=your_book_name).exists()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'your_book_name' is not defined
>>> print(f"Book exists: {book_exists}")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'book_exists' is not defined
>>> book_exists = Book.objects.filter(name='harry potter part 10').exists()
>>> print(f"Book exists: {book_exists}")
Book exists: True
>>> books_ordered_by_name = Book.objects.order_by('name')
>>> for book in books_ordered_by_name:
...     print(book.name)
...
harry potter part 1
harry potter part 10
harry potter part 2
harry potter part 3
harry potter part 4
harry potter part 5
harry potter part 6
harry potter part 7
harry potter part 8
harry potter part 9
>>> book_names_to_delete = ["harry potter part 10", "harry potter part 9"]  
>>>
>>> books_to_delete = Book.objects.filter(name__in=book_names_to_delete)
>>>
>>> deleted_count, _ = books_to_delete.delete()
>>> 
>>> print(f"{deleted_count} books deleted.")
2 books deleted.
>>> book = Book.objects.get(name=" harry potter part 1")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\HP\OneDrive\Documents\python demo\shell\env\Lib\site-packages\django\db\models\manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\OneDrive\Documents\python demo\shell\env\Lib\site-packages\django\db\models\query.py", line 649, in get
    raise self.model.DoesNotExist(
book.models.Book.DoesNotExist: Book matching query does not exist.
>>> book.count = new_count_value
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'new_count_value' is not defined
>>> book.save()
>>> book = Book.objects.get(name=harry potter part 1)
  File "<console>", line 1
    book = Book.objects.get(name=harry potter part 1)
                                 ^^^^^^^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
>>> book.count = new_count_value
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'new_count_value' is not defined
>>> book.save()
>>>
>>> book_name = "harry potter part 1" 
>>> try:
...     book = Book.objects.get(name=book_name)
... except Book.DoesNotExist:
...     print("Book with name", book_name, "does not exist.")
... else:
...     book.books_count += 1
...     book.save()
...     print("Books count for", book_name, "updated successfully.")
... 
Traceback (most recent call last):
  File "<console>", line 6, in <module>
AttributeError: 'Book' object has no attribute 'books_count'
>>> book_name = "harry potter part 1" 
>>> try:
...     book = Book.objects.get(name=book_name)
... except Book.DoesNotExist:
...     print("Book with name", book_name, "does not exist.")
... else:
...     book.books_count += 1
...     book.save()
...     print("Books count for", book_name, "updated successfully.")
... 
Traceback (most recent call last):
  File "<console>", line 6, in <module>
AttributeError: 'Book' object has no attribute 'books_count'
>>> book_name = "harry potter part 5"
>>> try:
...     book = Book.objects.get(name=book_name)
... except Book.DoesNotExist:
...     print("Book with name", book_name, "does not exist.")
... else:
...     book.books_count += 1
...     book.save()
...
Traceback (most recent call last):
  File "<console>", line 6, in <module>
AttributeError: 'Book' object has no attribute 'books_count'
>>> book_name = "harry potter part 5" 
>>> try:
...     book = Book.objects.get(name=book_name)
... except Book.DoesNotExist:
...     print("Book with name", book_name, "does not exist.")
... else:
...     book.books_count += 1
...     book.save()
... 
Traceback (most recent call last):
  File "<console>", line 6, in <module>
AttributeError: 'Book' object has no attribute 'books_count'
>>> book_name = "harry potter part 5" 
>>> try:
...     book = Book.objects.get(name=book_name)
... except Book.DoesNotExist:
...     print("Book with name", book_name, "does not exist.")
... else:
...     book.count+= 1
...     book.save()
... 
>>> 
>>> book_name = "harry potter part 5" 
>>> 
>>> try:
...     book = Book.objects.get(name=book_name)
... except Book.DoesNotExist:
...     print("Book with name", book_name, "does not exist.")
... else:
...     # Increment the count
...     book.count += 1
...     book.save()
...
>>>     # Retrieve all details of the book
>>>     book_details = {
  File "<console>", line 1
    book_details = {
IndentationError: unexpected indent
>>>         "Name": book.name,
  File "<console>", line 1
    "Name": book.name,
IndentationError: unexpected indent
>>>         "Price": book.price,
  File "<console>", line 1
    "Price": book.price,
IndentationError: unexpected indent
>>>         "Average Rating": book.average_rating,
  File "<console>", line 1
    "Average Rating": book.average_rating,
IndentationError: unexpected indent
>>>         "Count": book.count,
  File "<console>", line 1
    "Count": book.count,
IndentationError: unexpected indent
>>>         "Author": book.author.full_name
  File "<console>", line 1
    "Author": book.author.full_name
IndentationError: unexpected indent
>>>         # Add more fields as needed
>>>     }
  File "<console>", line 1
    }
IndentationError: unexpected indent
>>> 
>>>     print("Details of the book:", book_details)
  File "<console>", line 1
    print("Details of the book:", book_details)
IndentationError: unexpected indent
>>> book_name = "harry potter part 5"
>>> try:
...     book = Book.objects.get(name=book_name)
...     book.count += 1
...     book.save()
...     print("Books count for", book_name, "updated successfully.")
... except Book.DoesNotExist:
...     print("Book with name", book_name, "does not exist.")
...
Books count for harry potter part 5 updated successfully.
>>> books_with_count_less_than_20 = Book.objects.filter(count__lte=20).values_list('name', flat=True)
>>> for book_name in books_with_count_less_than_20:
...     print(book_name)
...
harry potter part 1
harry potter part 2
harry potter part 3
harry potter part 4
harry potter part 5
harry potter part 6
harry potter part 7
harry potter part 8
harry potter part 9
>>> authors_starting_with_a = Author.objects.filter(first_name__istartswith='a')
>>> for author in authors_starting_with_a:
...     print(author.full_name)
...
Traceback (most recent call last):
  File "<console>", line 2, in <module>
AttributeError: 'Author' object has no attribute 'full_name'
>>> authors_starting_with_a = Author.objects.filter(first_name__istartswith='a')
>>> for author in authors_starting_with_a:
...     print(author.first_name)
...
Author1
Author2
Author3
Author4
Author5
>>> authors_with_d_in_first_name = Author.objects.filter(first_name__icontains='d')
>>> for author in authors_with_d_in_first_name:
...     print(author.first_name)
...
>>> authors_with_d_in_first_name = Author.objects.filter(first_name__icontains='d')
>>> for author in authors_with_d_in_first_name:
...     print(author.first_name, author.last_name)
...
>>> deleted_count, _ = Book.objects.filter(count=0).delete()
>>> print(f"{deleted_count} books deleted.")
2 books deleted.
>>>